"""
Package Installer Utility

This module provides functionality to automatically install Python packages required to run code generated by an agent. 
It identifies missing packages based on the imports in the provided code, checks the current environment for already 
installed packages, and installs the missing ones using pip.

Functions:
	- get_installed_packages() -> Set[str]:
		Retrieves a set of installed packages in the current Python environment.

	- install_package(packages: str) -> Dict[str, bool]:
		Installs the specified packages using pip and returns a dictionary indicating the installation status.

	- install_missing_packages(required_packages: Set[str]) -> Dict[str, bool]:
		Installs missing packages from a given set of required packages and returns their installation status.

	- extract_import(code: str) -> Set[str]:
		Extracts package names from the import statements in the provided code and returns them as a set.
"""

import os
import subprocess
import sys
import time
from typing import Any, Dict, Set
import re


def get_installed_packages() -> Set[str]:
    """
    Get a list of installed packages in the current environment.

    Returns:
        A set of installed package names.
    """
    installed_packages = set()
    try:
        import pkg_resources
        installed_packages = {pkg.key for pkg in pkg_resources.working_set}
    except ImportError:
        pass
    return installed_packages


def install_package(packages) -> Dict[str, bool]:
    """
    Install the specified packages using pip.
    Args:
		packages: A list of package names to install.
    Returns:
		A dictionary with package names as keys and installation status as values.
	"""
    result = {}
    for package in packages:
        try:
            subprocess.check_call(
                [sys.executable, '-m', 'pip', 'install', package]
            )
            result[package] = True
        except subprocess.CalledProcessError:
            result[package] = False
    return result

def install_missing_packages(required_packages: Set[str]) -> Dict[str, bool]:
    """
    Install missing packages in the current environment.

    Args:
        required_packages: A set of required package names.

    Returns:
        A dictionary with package names as keys and installation status as values.
    """
    print(required_packages)
    installed_packages = get_installed_packages()
    missing_packages = required_packages - installed_packages
    print(missing_packages)
    return install_package(missing_packages) if missing_packages else {}

def extract_import(code:str) -> Set[str]:
    """
    Extract the package names from the given code.
	Args:
		code: A string containing the code to analyze.
    """
    import_pattern = re.compile(
        r'^\s*(?:from\s+([\w.]+)\s+import|import\s+([\w.]+))',
        re.MULTILINE
    )
    matches = import_pattern.finditer(code)
    packages = set()

    for match in matches:
        # print(match)
        package = match.group(1) or match.group(2)
        # print(package)
        if '.' in package:
            base_package = package.split('.')[0]
        else:
            base_package = package
        # print(base_package)
        if base_package not in sys.stdlib_module_names:
            packages.add(base_package)

    return packages
def get_code_from_file(file_path: str) -> str:
	"""
	Read the content of the file at the specified path.

	Args:
		file_path: The path to the file.

	Returns:
		The content of the file as a string.
	"""
	with open(file_path, 'r') as file:
		return file.read()

def execute_code(code: str, language:str) -> Dict[str, Any]:
    """
    Execute the given code in a temporary file.
    """
    temp_file = os.path.join(
        os.getcwd(), f"temp_{int(time.time())}.{'py' if language == 'python' else 'sh'}")
    try:
        if language == 'python':
            required_packages = extract_import(code)
            if required_packages:
                installation_results = install_missing_packages(
                    required_packages)
                if not all(installation_results.values()):
                    failed_packages = [
                        pkg for pkg, success in installation_results.items() if not success]
                    return {'success': False, 'output': None,
                            'error': f"Failed to install required packages: {', '.join(failed_packages)}",
                            'return_code': -1}

        with open(temp_file, 'w') as f:
            f.write(code)
        result = subprocess.run(
            [language, temp_file], capture_output=True, text=True, timeout=30)
        success = result.returncode == 0
        print(
            f"{'Code executed successfully' if success else 'Code execution failed'}")
        print(f"Result: {result.stdout if success else result.stderr}")
        return {'success': success, 'output': result.stdout if success else result.stderr,
                'error': result.stderr if not success else None, 'return_code': result.returncode}
    except Exception as e:
        print(f"Code execution error: {e}")
        return {'success': False, 'output': None, 'error': str(
            e) + '\nMake sure you only send the command and the code, without anything else in your message',
            'return_code': -1}
    finally:
        if os.path.exists(temp_file):
            os.remove(temp_file)
# if __name__ == "__main__":
	# Example usage
	# print(get_code_from_file("scraper.py"))
	# print(extract_import(get_code_from_file("scraper.py")))
	# print(install_missing_packages(extract_import(get_code_from_file("scraper.py"))))