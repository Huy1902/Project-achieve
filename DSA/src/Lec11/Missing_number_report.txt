- Using hashtable in java (based on separate chaining which have guarantee in search, insert, delete all is n
and average case for all of them is 3 - 5 (under uniform hashing assumption)). Time complexity for hash average is
O(5 * (M + N)) with N and M (N <= M) is size of arr and brr. Moreover, we use sort list so time complexity for that (sort list
in java based on quick sort) is O(nlogn) (probabilistic guarantee), more precise is with average 2n ln n and 1/2 n^2
for worst case.
- Using sort in two list make time complexity is O(Nlog(N) + Mlog(M)) (probabilistic guarantee although this is a best
case), average for quick sort is 2n ln n and 1/2 n^2 for worst case
- Because max(brr) - min(brr) <= 100 so we can resolve problem as counting sort. To ensure we have enough space for
 counting array, we find min(brr) ( theta(M) ). Hence, we have counting array with size guarantee <= 100. We iterate
 through two list which cost theta(M + N) and get result with complexity O(M - N).